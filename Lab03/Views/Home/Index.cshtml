<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>RESTful service app</title>
    <style>
        .input {
            margin: 5px 0;
        }
    </style>
</head>
<body>
<main id="main" style="display: none;">
    <section id="get-all">
            <div style="display: flex; flex-direction: row;">
                <form id="create-student" class="create-student" style="display: flex; flex-direction: column;">
                    <label>Student name
                        <input type="text" class="name"/>
                    </label>
                    <label>Student phone
                        <input type="text" class="phone input"/>
                    </label>

                    <button type="button" onclick="postStudent()">Create</button>
                </form>
            </div>
            <form>
                <p>Params</p>
                <label>
                    Limit
                    <input type="text" id="param-limit">
                </label>
                <label>
                    Offset
                    <input type="text" id="param-offset">
                </label>
                <label>
                    Sort
                    <input type="checkbox" id="param-sort" checked>
                </label>
                <label>
                    MinId
                    <input type="text" id="param-minId">
                </label>
                <label>
                    MaxId
                    <input type="text" id="param-maxId">
                </label>
                <label>
                    Search by name
                    <input type="text" id="param-like">
                </label>
                <label>
                    Global search
                    <input type="text" id="param-globalLike">
                </label>
                <p>
                    MediaType
                </p>
                <label>
                    <input type="radio" name="mediaType" id="param-mediaType-xml">
                    Xml
                    <input type="radio" name="mediaType" id="param-mediaType-json">
                    Json
                </label>
            </form>
            <form>
                <p>Columns</p>
                <input type="checkbox" id="checkbox-id" name="Id" checked/>
                <label for="checkbox-id">Id</label>
                <input type="checkbox" id="checkbox-name" name="Name" checked/>
                <label for="checkbox-name">Name</label>
                <input type="checkbox" id="checkbox-phone" name="Phone" checked/>
                <label for="checkbox-phone">Phone</label>
            </form>
            <div id="error-container" style="display: none">
                <p id="error" style="color: red;"></p>
                <a href="#" onclick="document.querySelector('#error-container').style.display = 'none';">Close</a>
            </div>
            <button type="button" onclick="getAll()" style="margin: 30px 0;">Refresh</button>
            <table id="table" style="width: 100%;">
                <thead id="thead"></thead>
                <tbody id="tbody"></tbody>
            </table>
    </section>
    <section id="concrete">
        <form class="update-student" style="display: flex; flex-direction: column; margin: 0 15px;">
            <h1 class="id"></h1>
            <label>Student Name
                <input type="text" class="name input"/>
            </label>
            <label>Student Phone
                <input type="text" class="phone"/>
            </label>

            <button class="input update" type="button">Update</button>
            <button class="input cancel" type="button">Cancel</button>
        </form>
        <div id="error-container-2" style="display: none">
            <p id="error-2" style="color: red;"></p>
            <a href="#" onclick="document.querySelector('#error-container-2').style.display = 'none';">Close</a>
        </div>
    </section>
</main>
<script>
const studentsScreen = document.querySelector("#get-all");
const studentScreen = document.querySelector("#concrete");
let screen = "students";
const toStudentsScreen = () => {
    studentScreen.style.display = "none";
    studentsScreen.style.display = "block";
    screen = "students";
    document.querySelector('#error-container-2').style.display = 'none';
    document.querySelector('#error-container').style.display = 'none';
}
const toStudentScreen = () => {
    studentScreen.style.display = "flex";
    studentsScreen.style.display = "none";
    screen = "student";
    document.querySelector('#error-container-2').style.display = 'none';
    document.querySelector('#error-container').style.display = 'none';
}

// ----------------------------------------------
// Table generation
// ----------------------------------------------
const table = document.querySelector("#table");
const tBody = document.querySelector("#tbody");
const tHead = document.querySelector("#thead");
const selectedColumns = {
    id: true,
    name: true,
    phone: true   
};
const analyzeListLinks = (links) => {
    if (links.length === 0) {
        return;
    }
    
    const createLink = links.find(l => l.Rel === "create");
    if (!createLink) {
        document.querySelector(".create-student").style.display = "none";
        return;
    }
    table.dataset.createStudent = JSON.stringify({ method: createLink.Method, href: createLink.Href });
}
const analyzeStudentLinks = (links, element, student) => {
    if (links.length === 0) {
        return;    
    }
    const analyzeUpdateLink = () => {
        const getLink = links.find(l => l.Rel === "self");
        if (!getLink) {
            return;
        }
        
        const td = document.createElement("td");
        const updateButton = document.createElement("button");
        updateButton.innerText = "Update";
        updateButton.addEventListener("click", () => {
            toStudentScreen();
            getStudent(getLink.Method, getLink.Href);
        })
        td.appendChild(updateButton);
        element.appendChild(td);
    }
    const analyzeDeleteLink = () => {
        const deleteLink = links.find(l => l.Rel === "delete");
        if (!deleteLink) {
            return;
        }
        
        const td = document.createElement("td");
        const deleteButton = document.createElement("button");
        deleteButton.innerText = "Delete";
        deleteButton.addEventListener("click", () => {
            deleteStudent(deleteLink.Method, deleteLink.Href);
        })
        td.appendChild(deleteButton);
        element.appendChild(td);
    }
    
    analyzeUpdateLink();
    analyzeDeleteLink()
}
const generateTable = (data) => {
    const resetUi = () => {
        tBody.innerHTML = "";
        tHead.innerHTML = "";
    }
    const { Content, Links } = data;
    
    resetUi();
    
    analyzeListLinks(Links);
    if (Content.length === 0) {
        return;
    }
    
    if (selectedColumns.id) {
        const id = document.createElement("td");
        id.innerText = "Id";
        tHead.appendChild(id);
    }
    if (selectedColumns.name) {
        const name = document.createElement("td");
        name.innerText = "Name";
        tHead.appendChild(name);
    }
    if (selectedColumns.phone) {
        const phone = document.createElement("td");
        phone.innerText = "Phone";
        tHead.appendChild(phone);
    }
    
    for (const student of Content) {
        const trBody = document.createElement("tr");
        
        if (selectedColumns.id) {
            const id = document.createElement("td");
            id.innerText = student.Id;
            trBody.appendChild(id);
        }
        if (selectedColumns.name) {            
            const name = document.createElement("td");
            name.innerText = student.Name;
            trBody.appendChild(name);
        }
        if (selectedColumns.phone) {
            const phone = document.createElement("td");
            phone.innerText = student.Phone;
            trBody.appendChild(phone);
        }
        analyzeStudentLinks(student.Links, trBody, student);

        
        tBody.appendChild(trBody);
    }
}
const generateUpdateForm = (data) => {
    const resetUi = (id, name, phone) => {
        document.querySelector(".update-student .id").innerHTML = "Student Id: " + id;
        document.querySelector(".update-student .name").value = name;
        document.querySelector(".update-student .phone").value = phone;
    }
    
    const { Id, Name, Phone, Links } = data;
    
    resetUi(Id,  Name,  Phone);
    
    const updateLink = Links.find(l => l.Rel === "update");
    
    const handleClick = () => {
        putStudent(updateLink.Method, updateLink.Href);
    };
    const handleCancel = () => {
        toStudentsScreen();  
    };
    
    const buttonUpdate = document.querySelector(".update-student .update");
    const clone = buttonUpdate.cloneNode(true);
    buttonUpdate.replaceWith(clone);
    clone.addEventListener("click", handleClick);
    const buttonCancel = document.querySelector(".update-student .cancel");
    const clone1 = buttonCancel.cloneNode(true);
    buttonCancel.replaceWith(clone1);
    clone1.addEventListener("click", handleCancel);
}

// ----------------------------------------------
// Selected columns
// ----------------------------------------------

const onChosenColumns = async (e) => {
    const columnId = document.querySelector("#checkbox-id").checked;
    const columnName = document.querySelector("#checkbox-name").checked;
    const columnPhone = document.querySelector("#checkbox-phone").checked;
    
    if ((columnId || columnName || columnPhone) === false) {
        e.preventDefault();
        return;
    }
    
    selectedColumns.id = columnId;
    selectedColumns.name = columnName;
    selectedColumns.phone = columnPhone;
}
document.querySelector("#checkbox-id").addEventListener("click", onChosenColumns);
document.querySelector("#checkbox-name").addEventListener("click", onChosenColumns);
document.querySelector("#checkbox-phone").addEventListener("click", onChosenColumns);

// ----------------------------------------------
// Params
// ----------------------------------------------

const defaultParams = {
    limit: 10,
    offset: 0,
    minId: 1,
    maxId: 9999999, 
    sort: false,
    like: "",
    globalLike: "",
    isMediaTypeJson: true,
};
(function setDefaultParams() {
    document.querySelector("#param-limit").value = defaultParams.limit;
    document.querySelector("#param-offset").value = defaultParams.offset;
    document.querySelector("#param-minId").value = defaultParams.minId;
    document.querySelector("#param-maxId").value = defaultParams.maxId;
    document.querySelector("#param-sort").checked = defaultParams.sort;
    document.querySelector("#param-like").value = defaultParams.like;
    document.querySelector("#param-globalLike").value = defaultParams.globalLike;
    document.querySelector("#param-mediaType-xml").checked = defaultParams.isMediaTypeJson === false;
    document.querySelector("#param-mediaType-json").checked = defaultParams.isMediaTypeJson;
})();
const getParams = () => {
    const getColumns = () => {
        let columns = "";
        if (selectedColumns.id) {
            columns += "Id,";    
        }
        if (selectedColumns.name) {
            columns += "Name,";    
        }
        if (selectedColumns.phone) {
            columns += "Phone,";    
        }
        return columns.slice(0, -1);
    }
    
    const limit = document.querySelector("#param-limit").value;
    const offset = document.querySelector("#param-offset").value;
    const minId = document.querySelector("#param-minId").value;
    const maxId = document.querySelector("#param-maxId").value;
    const sort = document.querySelector("#param-sort").checked;
    const like = document.querySelector("#param-like").value;
    const globalLike = document.querySelector("#param-globalLike").value;
    const isMediaTypeJson = document.querySelector("#param-mediaType-json").checked;
    
    const params = {
        limit: limit === "" ? undefined : Number(limit),
        offset: offset === "" ? undefined : Number(offset),
        minId: minId === "" ? undefined : Number(minId),
        maxId: maxId === "" ? undefined : Number(maxId),
        sort: sort ? sort : undefined,
        like: like === "" ? undefined : like,
        globalLike: globalLike === "" ? undefined : globalLike,
        columns: getColumns(),
        mediaType: isMediaTypeJson ? "json" : "xml",
    }
    
    return JSON.parse(JSON.stringify(params));
}

// ----------------------------------------------
// Xml parsing
// ----------------------------------------------

function parseXml(xml, arrayTags) {
    let dom = null;
    if (window.DOMParser) dom = (new DOMParser()).parseFromString(xml, "text/xml");
    else if (window.ActiveXObject) {
        dom = new ActiveXObject('Microsoft.XMLDOM');
        dom.async = false;
        if (!dom.loadXML(xml)) throw dom.parseError.reason + " " + dom.parseError.srcText;
    }
    else throw new Error("cannot parse xml string!");

    function parseNode(xmlNode, result) {
        if (xmlNode.nodeName === "#text") {
            let v = xmlNode.nodeValue;
            if (v.trim()) result['text'] = v;
            return;
        }

        let jsonNode = {},
            existing = result[xmlNode.nodeName];
        if (existing) {
            if (!Array.isArray(existing)) result[xmlNode.nodeName] = [existing, jsonNode];
            else result[xmlNode.nodeName].push(jsonNode);
        }
        else {
            if (arrayTags && arrayTags.indexOf(xmlNode.nodeName) !== -1) result[xmlNode.nodeName] = [jsonNode];
            else result[xmlNode.nodeName] = jsonNode;
        }

        if (xmlNode.attributes) for (let attribute of xmlNode.attributes) jsonNode[attribute.nodeName] = attribute.nodeValue;

        for (let node of xmlNode.childNodes) {
             parseNode(node, jsonNode);   
        }
    }

    let result = {};
    for (let node of dom.childNodes) {
        parseNode(node, result);   
    }

    return result;
}

const getArray = (entity, propName) => (
    Array.isArray(entity[propName]) ? entity[propName] : 
        typeof entity[propName] === "undefined" ? [] : [entity[propName]]
);
const transformStudentsXmlToJsonLike = (data) => {
    const parsed = parseXml(data);
    const { Content, Links } = parsed.Students;
    
    const transformedContent = getArray(Content, "Student");
    const transformed = {
        Content: transformedContent.map(s => {
            const newS = { Links: s.Links };
            for (const [key, value] of Object.entries(s)) {
                if (key === "Links") continue;
                newS[key] = value.text;
            }
            return newS;
        }),
        Links: getArray(Links, "Link"),
    }
    
    transformed.Content = transformed.Content.map(student => {
        student.Links = getArray(student.Links, "Link");
        return student;
    })
    
    return transformed;
}
const transformStudentXmlToJsonLike = (data) => {
    const parsed = parseXml(data);
    const { Links } = parsed.Student;
    
    const s = parsed.Student;
    const newS = { Links: s.Links };
    for (const [key, value] of Object.entries(s)) {
        if (key === "Links") continue;
        newS[key] = value.text;
    }
    const transformed = {
        ...newS,
        Links: getArray(Links, "Link"),
    }
    
    return transformed;
}
const transformErrorXmlToJsonLike = (data) => {
    const parsed = parseXml(data);
    const { StatusCode, Links } = parsed.Error;
    
    return {
        StatusCode: StatusCode.text,
        Links: getArray(Links, "Link"),
    };
}
const transformErrorDescribeXmlToJsonLike = (data) => {
    const parsed = parseXml(data);
    const { Message } = parsed.Error;
    
    return {
        Message: Message.text
    };
}

// ----------------------------------------------
// Api calls
// ----------------------------------------------

let studentsUri = "";
const start = async () => {
    const response = await fetch("/api");
    const links = await response.json();
    
    studentsUri = links.find(l => l.Rel === "students").Href;
    
    document.querySelector("#main").style.display = "block";
    toStudentsScreen();
    await getAll();
}

const getAll = async () => {
    const params = getParams();
    const url = new URL(studentsUri);
    for (let [key, value] of Object.entries(params)) {
        url.searchParams.set(key, value);
    }
    const response = await fetch(url.href);
    
    let data;
    if (params.mediaType === "json") {
        data = await response.json();
    } else {
        const xml = await response.text();
        data = transformStudentsXmlToJsonLike(xml);
    }
    
    generateTable(data);
}

const getStudent = async (method, href) => {
    const { mediaType } = getParams();
    const response = await fetch(href + "?mediaType=" + mediaType, {
        method: method,   
    });
    
    let data;
    if (mediaType === "json") {
        data = await response.json();
    } else {
        const xml = await response.text();
        data = transformStudentXmlToJsonLike(xml);
    }
    
    generateUpdateForm(data);
}

const postStudent = async () => {
    const name = document.querySelector(".create-student .name").value ?? "";
    const phone = document.querySelector(".create-student .phone").value ?? "";
    
    const { mediaType } = getParams();
    const { method, href } = JSON.parse(table.dataset.createStudent);
    const response = await fetch(href + "?mediaType=" + mediaType,  {
        method: method,
        headers: {    
            "Content-Type": "application/json",    
        },
        body: JSON.stringify({
            Name: name,
            Phone: phone
        })
    });
    
    if (response.status === 200) {
        getAll();
        return;
    }
    
    let error;
    if (mediaType === "json") {
        error = await response.json();
    } else {
        const xml = await response.text();
        error = transformErrorXmlToJsonLike(xml);
    }
    
    await describeError(error, { container: "#error-container", error: "#error" });
}

const putStudent = async (method, href) => {
    const name = document.querySelector(".update-student .name").value ?? "";
    const phone = document.querySelector(".update-student .phone").value ?? "";
    
    const { mediaType } = getParams();
    const response = await fetch(href + "?mediaType=" + mediaType,  {
        method: method,
        headers: {    
            "Content-Type": "application/json",    
        },
        body: JSON.stringify({
            Name: name,
            Phone: phone
        })
    });
    
    if (response.status === 200) {
        toStudentsScreen();
        getAll();
        return;
    }
    
    let error;
    if (mediaType === "json") {
        error = await response.json();
    } else {
        const xml = await response.text();
        error = transformErrorXmlToJsonLike(xml);
    }
    
    await describeError(error, { container: "#error-container-2", error: "#error-2" });
}

const deleteStudent = async (method, href) => {
    const { mediaType } = getParams();
    const response = await fetch(href,  {
        method: method,
    });
    
    if (response.status === 200) {
        getAll();
        return;
    }
    
    let error;
    if (mediaType === "json") {
        error = await response.json();
    } else {
        const xml = await response.text();
        error = transformErrorXmlToJsonLike(xml);
    }
    
    await describeError(error, { container: "#error-container", error: "#error" });
}

const describeError = async (error, selectors) => {
    const { StatusCode, Links } = error;
    document.querySelector(selectors.container).style.display = "block";
    document.querySelector(selectors.error).innerText = `Code: ${StatusCode}\n`;
    
    const describeLink = Links.find(l => l.Rel === "describe");
    
    if (!describeLink) {
        document.querySelector(selectors.error).innerText += "Cannot describe error";
    }
    
    const { mediaType } = getParams();
    const { Href, Method } = describeLink;
    const response = await fetch(Href + "?mediaType=" + mediaType, {
        method: Method
    });
    
    let data;
    if (mediaType === "json") {
        data = await response.json();
    } else {
        const xml = await response.text();
        data = transformErrorDescribeXmlToJsonLike(xml);
    }
    document.querySelector(selectors.error).innerText += data.Message;
}

// ----------------------------------------------
// Start
// ----------------------------------------------

start();
</script>
</body>
</html>