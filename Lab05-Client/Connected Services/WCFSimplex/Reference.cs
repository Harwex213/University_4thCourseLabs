//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab05_Client.WCFSimplex {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="A", Namespace="http://schemas.datacontract.org/2004/07/Lab05")]
    [System.SerializableAttribute()]
    public partial class A : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float F {
            get {
                return this.FField;
            }
            set {
                if ((this.FField.Equals(value) != true)) {
                    this.FField = value;
                    this.RaisePropertyChanged("F");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int K {
            get {
                return this.KField;
            }
            set {
                if ((this.KField.Equals(value) != true)) {
                    this.KField = value;
                    this.RaisePropertyChanged("K");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string S {
            get {
                return this.SField;
            }
            set {
                if ((object.ReferenceEquals(this.SField, value) != true)) {
                    this.SField = value;
                    this.RaisePropertyChanged("S");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFSimplex.ISimplex")]
    public interface ISimplex {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimplex/Add", ReplyAction="http://tempuri.org/ISimplex/AddResponse")]
        int Add(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimplex/Add", ReplyAction="http://tempuri.org/ISimplex/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int x, int y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimplex/Concat", ReplyAction="http://tempuri.org/ISimplex/ConcatResponse")]
        string Concat(string x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimplex/Concat", ReplyAction="http://tempuri.org/ISimplex/ConcatResponse")]
        System.Threading.Tasks.Task<string> ConcatAsync(string x, double y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimplex/Sum", ReplyAction="http://tempuri.org/ISimplex/SumResponse")]
        Lab05_Client.WCFSimplex.A Sum(Lab05_Client.WCFSimplex.A x, Lab05_Client.WCFSimplex.A y);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISimplex/Sum", ReplyAction="http://tempuri.org/ISimplex/SumResponse")]
        System.Threading.Tasks.Task<Lab05_Client.WCFSimplex.A> SumAsync(Lab05_Client.WCFSimplex.A x, Lab05_Client.WCFSimplex.A y);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISimplexChannel : Lab05_Client.WCFSimplex.ISimplex, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SimplexClient : System.ServiceModel.ClientBase<Lab05_Client.WCFSimplex.ISimplex>, Lab05_Client.WCFSimplex.ISimplex {
        
        public SimplexClient() {
        }
        
        public SimplexClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SimplexClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimplexClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SimplexClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Add(int x, int y) {
            return base.Channel.Add(x, y);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int x, int y) {
            return base.Channel.AddAsync(x, y);
        }
        
        public string Concat(string x, double y) {
            return base.Channel.Concat(x, y);
        }
        
        public System.Threading.Tasks.Task<string> ConcatAsync(string x, double y) {
            return base.Channel.ConcatAsync(x, y);
        }
        
        public Lab05_Client.WCFSimplex.A Sum(Lab05_Client.WCFSimplex.A x, Lab05_Client.WCFSimplex.A y) {
            return base.Channel.Sum(x, y);
        }
        
        public System.Threading.Tasks.Task<Lab05_Client.WCFSimplex.A> SumAsync(Lab05_Client.WCFSimplex.A x, Lab05_Client.WCFSimplex.A y) {
            return base.Channel.SumAsync(x, y);
        }
    }
}
